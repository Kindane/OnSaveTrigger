#include <stdio.h>
#include <string.h>
#include <memory.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/inotify.h>
#include <unistd.h>

#define EVENT_SIZE  (sizeof(struct inotify_event))
#define BUF_LEN     (1024 * (EVENT_SIZE + 16))

void get_file_name(char* restrict, char* restrict);

int main(int argc, char **argv) {

    if (argc < 3) {
        printf("ERROR! Not enough arguments.\n");
        printf("Usage: %s FILE \"COMMAND\"\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    char* file_name = (char*)malloc(32*sizeof(char*));
    char* path = (char*)malloc(32*sizeof(char*));
    char* command = (char*)malloc(128*sizeof(char*));
    strcpy(command, argv[2]);

    get_file_name(argv[1], file_name);

    strncpy(path, argv[1], strlen(argv[1]) - strlen(file_name) - 1);


    int length, i = 0;
    int fd;
    int wd;
    char buffer[BUF_LEN];

    fd = inotify_init();

    if (fd < 0) {
        perror("inotify_init");

    }

    wd = inotify_add_watch(fd, path, IN_MODIFY /* | IN_CREATE | IN_DELETE */);
    length = read(fd, buffer, BUF_LEN);

    if (length < 0) {
        perror("read");

    }

    while (i < length) {
        struct inotify_event *event = (struct inotify_event *) &buffer[i];
        if (event->len) {
            if (event->mask & IN_MODIFY) {
                if (!strcmp(event->name, file_name)) {
                    printf("The file %s was modified.\n", event->name);
                    system(command);
                }

            }

        }
        i += EVENT_SIZE + event->len;

    }

    (void) inotify_rm_watch(fd, wd);
    (void) close(fd);

    return 0;

}

// TODO DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void get_file_name(char* restrict path, char* restrict buffer) {
    char* path_copy = (char*)malloc(64*sizeof(char*));
    char* precious_name = (char*)malloc(64*sizeof(char*));
    char* result = (char*)malloc(64*sizeof(char*));

    strcpy(path_copy, path);

    precious_name = strtok(path_copy, "/");

    while (precious_name != NULL) {
        strcpy(result, precious_name);
        precious_name =  strtok(NULL, "/");
    }

    strcpy(buffer, result);
    free(precious_name);
    free(result);
    free(path_copy);
}

